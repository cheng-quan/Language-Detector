//==============================================================================================
//    FILENAME    :   DetectionController.cpp
//    AUTHOR      :   Zeying Peng
//    CREATION    :   10/09/11
//    Copyright (C) MicroStrategy Incorporated 2011
//==============================================================================================


#include "DetectionController.h"
#include <fstream>
#include <ctime>
#include <cstdio>
#include <sstream>

::std::wstring getDateOfToday()
{
	time_t t = time(0);
	tm it;
	localtime_s(&it, &t);
	wchar_t date[12];
	swprintf( date, 12, L"%04d-%02d-%02d", it.tm_year+1900, it.tm_mon+1, it.tm_mday );
	return date;
}

::std::wstring getDateOfYesterday()
{
	time_t t = time(0) - 3600*24;
	tm it;
	localtime_s(&it, &t);
	wchar_t date[12];
	swprintf( date, 12, L"%04d-%02d-%02d", it.tm_year+1900, it.tm_mon+1, it.tm_mday );
	return date;
}


DetectionController::DetectionController() : m_DBUtility()
{
}

DetectionController::~DetectionController()
{
}

bool DetectionController::initiate()
{
	std::wstring lConnectionString = L"DSN=backup for wisdom;UID=wh;PWD=wh39";
	m_DBUtility.CreateConnection(lConnectionString);

	if( ! m_trigram_detector.init( "config_Trigram" ) )
	{
		::std::cout << "Failed to init LanguageDetector for Trigram." << ::std::endl;
		return false;
	}
	if( ! m_freqwords_detector.init( "config_FreqWords" ) )
	{
		::std::cout << "Failed to init LanguageDetector for FreqWords." << ::std::endl;
		return false;
	}

	return true;
}

void DetectionController::run()
{
	::std::vector< LANG_ID > vlt(2);
	::std::vector< LANG_ID > vlf(2);

	// execute sql query
	::std::wstring lStatement = L"select cast(idPost as char), message, cast(id_TargetUser as char), cast(Object_created_day as char) from Post where created_time>='"
								+ getDateOfYesterday() + L"' and created_time<'" + getDateOfToday() + L"'";
//	::std::wstring lStatement = L"select cast(idPost as char), message, cast(id_TargetUser as char), cast(Object_created_day as char) from Post where created_time>='2011-11-25' and created_time<'2011-11-26'";
	::std::wcout << lStatement << ::std::endl;
	MDb::TablePtr lTablePtr = m_DBUtility.ExecuteQuery(lStatement);
	if( lTablePtr.IsNull() )
		return;

	unsigned int disagreeOnFirst = 0;
	unsigned int agreeOnBoth = 0;
	unsigned int agreeOnFirst = 0;
	unsigned int unknown = 0;
	::std::string langName[10] = {"Unknown", "English", "German", "Spanish", "French", "Italian",
		"Japanese", "Korean", "Portuguese", "Chinese"};
	size_t	agree[10] = {0};
	size_t	disagree[10] = {0};

	::std::wstring insertStatement = L"insert into TM_LANG_DETECTOR_ANNOTATION VALUES (";
	m_prep.Init("../MsgTagMultilingualDetector/config/emoticons.txt");
	for( int i=0; i<lTablePtr->GetRowCount(); i++ )
	{
		//get cell value
		::std::wstring postId = ::std::wstring(lTablePtr->GetCellData(0,i).ToWString().c_str());
		::std::string message = ::std::string(lTablePtr->GetCellData(1,i).ToString().c_str());
		::std::wstring id_TU = ::std::wstring(lTablePtr->GetCellData(2,i).ToWString().c_str());
		::std::wstring ocd = ::std::wstring(lTablePtr->GetCellData(3,i).ToWString().c_str());
		
		cleanMessage( message );
		if( message.length() <= 0 )
			continue;

		m_trigram_detector.detect( message, vlt );
		m_freqwords_detector.detect( message, vlf );
		
		// write language info to database if two detector disagree on the first language
		if( vlt[0] != vlf[0] )
		{
//			::std::cout << m_trigram_detector.getLanguageNameByID(vlt[0]) << "|" << m_trigram_detector.getLanguageNameByID(vlf[0])
//						<< "|" << message << ::std::endl;

			::std::wostringstream	woss;
			if( vlt[0] == LanguageDetector::UNKNOWN_LANGID && vlt[1] == LanguageDetector::UNKNOWN_LANGID )
				woss << insertStatement << postId << ", " << vlt[0] << ", " << vlt[1] << ", " << vlf[0] <<", " << vlf[1]
					 << ", -2, -2, 1, " << id_TU << ", " << ocd << ")";
			else
				woss << insertStatement << postId << ", " << vlt[0] << ", " << vlt[1] << ", " << vlf[0] <<", " << vlf[1]
					 << ", 0, 0, 0, " << id_TU << ", " << ocd << ")";
			
			m_DBUtility.Execute( woss.str() );

			disagreeOnFirst++;
			disagree[ vlt[0]>=0? vlt[0] : 0 ]++;
		}
		else if( vlt[1] != vlt[1] )
		{
			agreeOnFirst++;
			agree[ vlt[0]>=0? vlt[0] : 0 ]++;
		}
		else
		{
			agreeOnBoth++;
			agree[ vlt[0]>=0? vlt[0] : 0 ]++;
		}

		if( vlt[0] == LanguageDetector::UNKNOWN_LANGID )
			unknown++;
	}

	::std::cout << ::std::endl;
	for( size_t i = 1; i < 10; i++ )
	{
		::std::cout << langName[i] << " : agree-->" << agree[i] << ", disagree-->" << disagree[i] << ::std::endl;
	}

	::std::cout << ::std::endl;
	::std::cout << "Messages agree on both languages: " << agreeOnBoth << ::std::endl;
	::std::cout << "Messages only agree on first language: " << agreeOnFirst << ::std::endl;
	::std::cout << "Messages disagree on first language: " << disagreeOnFirst << ::std::endl;
	::std::cout << "Messages of Unknown language: " << unknown << ::std::endl;
	::std::cout << "************************************************************************\n" << ::std::endl;
}

void DetectionController::cleanMessage( ::std::string& msg )
{
	string lmsg;
	bitset<CONTTYPENUM> bsContent = m_prep.PreProcess( msg, lmsg);
	if(!bsContent[PreLDDetector::Text])
		msg = "";
	msg = lmsg;
}


